//console.log(doSomething("eiei"));

// Higher-Order Function
// รับ function เป็น params หรือ ส่งออกมาเป็นผบลัพธ์
// 1 create function with function declearation
function concat(str1, str2) {
  return str1 + str2;
}
// 2 create function with function expression
const toUpper = function (str1) {
  return str1.toUpperCase();
};
// 3 create function with named function expression
const revers = function rev(str1) {
  return [...str1].reverse().join("");
};
console.log(concat("js ", "Beginner"));
console.log(toUpper("hello"));
console.log(revers("Hello"));

// doSomething is a higher order function bacause it caccept op function its parameter
const doSomething = function (str1, op) {
  return op(str1);
};
console.log(doSomething("Hey", toUpper));
console.log(doSomething("Hey", revers));

// doIt is a higher order function bacause it return function as a result
const doIt = function () {
  return concat;
};
const p = doIt();
console.log(typeof x);
console.log(x("1", "first"));

// primitive parameter passing
const x = function (a) {
  a = 2;
};
let b = 1;
x(b);
console.log(b); // be does not change after calling x()
// object parameter passing
const y = function (m) {
  m.id = 555;
};
const std = { id: 6130500037, name: Nitisak };
y(std);
console.log(std.id); // std will change as function makes change of m
